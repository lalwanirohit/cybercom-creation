everything is object in javascript

- it is almost correct. but we can not say 100 % because of primitive datatypes. beside primitive data types all in javascript is object.
- we can turn primitives in objects but we can not say that it is 100 % object oriented.

object oriented programming

- in object oriented programming , objects interact with each other through the properties and methods.
- objects are used to store bunch of data and to keep the code clean
- ex. var john = {
	name : 'john',
	dob : '17-08-1999' ,
	gender : 'male'
        }

- so we can say that this is an example of simple object.

---------------------------------------------------------------------------------------------------------------------------

constructor

- constructor provides us the structure or blueprint based on which we can create so many objects easily.
- for example person is a constructor then based on that we can create objects/instances like , john , mary , mark etc.
- example
	var Person = function(name , yearOfBirth , job) {
    		this.name = name;
    		this.yearOfBirth = yearOfBirth;
    		this.job = job;
  	}

	var john = new Person('john',1995,'Designer');
	var rohit = new Person('rohit',1999,'Software Developer');

- here we can clearly see that we have created two objects of Person constructor.
- generally the constuctor's first character is always kept capital for good practice.

---------------------------------------------------------------------------------------------------------------------------

inheritance

- in general inheritance means one object is based on another object.
- it means that the one object can use the methods and properties of another object.
- by inheritance we don't have to write the repeated code again and again
- we can reuse the code which is already there.

- javascript is prototype based language.
- it means that in javascript is performed based on prototype.
- in javascript, each and every object has prototype property.
- we can perform inheritance using this prototype property
- for example the person constructor has a property and we want that all the objects can inherit that property then we have to put that property in person constructor's prototype property.
- example 

	var Person = function(name , yearOfBirth , job) {
    		this.name = name;
    		this.yearOfBirth = yearOfBirth;
    		this.job = job;
	}

	Person.prototype.country = 'India';

	var rohit = new Person('rohit',1999,'Software Developer');
	console.log(rohit.country);

- this way we can perform inheritance in javascript. 
- here we can see that first we put country property in prototype and then all objects of Person class can inherit it.

-------------------------------------------------------------------------------------------------------------------------

prototype chain

- each and every object that we create is an object of "object" constructor
- first when we call or when we try to access the Constructor's property in object at that time first it will search for that property in constructor. if it not there it    will then search in constructor's parent object. this way the chai will be created and will continue till at last it found null.
- this way we can simply describe the prototype chain

-------------------------------------------------------------------------------------------------------------------------
 
create object with Object.create method

- we can also create object of constructor through Object.create method
- it is also affective way to create objects.
-example 

	var personProto = {
    		calculateAge : function () {
        		console.log(2021 - this.yearOfBirth);
    		}
	};

	// first way
	var john = Object.create(personProto);
	mary.name = 'mary';
	mary.job = 'Software Developer';
	mary.yearOfBirth = 1986;

	// create object second way
	var kavya = Object.create(personProto, {
    		job: {value: 'designer'},
    		yearOfBirth: {value: 1979}
	});

----------------------------------------------------------------------------------------------------------------

primitives vs. Objects

- primitive always store a copy of value or we can say value.
- when we have two primitives with same value and the nwe change one primitive value then the second pritive will not get affected with it

- in case of objects, objects generally point to the memory
- if we assign same value to two objects and then change one object's value then second object's value will be changed automatically.

- example 

	//primitive
	var a = 45;
	var b = a;
	a = 50;

	console.log(a);
	console.log(b);


	//object
	var obj1 = {
	    age : 45,
	}

	var obj2 = obj1;
	obj1.age = 50;
	
	console.log(obj1.age);
	console.log(obj2.age);


	//function
	var age = 27;
	var obj = {
	    name : 'rahul',
	    city : 'jamnagar'
	};

	function change(a,b) {
	    a = 30;
	    b.city = "junagadh";
	}

	change(age , obj);

	console.log(age);
	console.log(obj.city);

-------------------------------------------------------------------------------------------------------------------------

instanceof : used to check weather it is instance of any object or constructor or not
console.info() : used to see all the onformation about any object or variable.

------------------------------------------------------------------------------------------------------------------------ 

passing function as a argument to another function

-example

	var years = [1990 , 1957 , 1965 , 1988];

	function arrayCalc(arr , fn) {
	    var arrRes = [];
	    for(var i=0 ; i<arr.length ; i++) {
	        arrRes.push(fn(arr[i]))
	    }
	    return arrRes;
	}

	function calculateAge(el) {
	    return 2021 - el;
	}

	var ages = arrayCalc(years , calculateAge);
	console.log(ages);