name : rohit lalwani
date : 6th january , 2021

today i first of all practiced the whole file again that was given earlier for learning process.

then i started learning new thing in git.

i learn how to set config. details globally as well as for particular command

To know all the files and settings of git are coming from which place ? 
$ git config –list –show-origin

To set the username and email globally we can use the following commands.
$ git config –global user.name “rohit lalwani”
$ git config –global user.email lalwanirohit111@gmail.com

This details will be used for all the project because we made it global. But if we want to change this for specific project we just have to remove –global
$ git config user.name “rohit lalwani”
$ git config user.email “lalwanirohit111@gmail.com”

We can also set our editor that will be used while git want us to type a message.
$ git config –global code.editor “C:\users\Dell\AppData\Local\Programs\Microsoft VS Code\Code.exe”

After that if we want to see the configuration list for git we can use 
$ git config –list

--------------------------------------------------------------------------------------------------------------------
first of all i learn about gitignore 

so generally there may be some og files or some unnecessary files which we don't want to track. but every time when we type $ git status at that time git will show those files as untracked. so how can we say git that we don't want them to be tracked.

so to do so first create a .gitignore file using touch command. 
then type those files name which we don't want to be get tracked and then add .gitignore file to staging and commit it.

for example there are lots of .log files and you want that all the files with .log extentions shoul not be tracked then simply type  *.log in .gitignore file.
this way we can also ignore folders too. 

to ignore folder we can provide folder_name/ , this will ignore all the folder with same name.
there are lots of patterns we can make to keep thing untrack and to keep them ignore
----------------------------------------------------------------------------------------------------------------------
then if there is a conflict is there in our files then we can use $ git mergetool command using which we can see where the conflict is happening and we can easily solve our conflict there.

----------------------------------------------------------------------------------------------------------------------
i learn about git log :

1) $ git log -p  ( display each commit point's details in deep )

2) $ git log -p -2 ( display only last two commit's details in deep )

3) $ git log --stat ( short summary about each and every comment )

4) $ git --pretty=online ( display each commit in one line.  we can use $ git log --oneline which is sort form. )

5) $git log --pretty=short ( display only the author of he file and just message )

6) $ git log --pretty=full( display author and commitor of file and also display the message )

7) $ git log --since=2.weeks ( display only those commit points which were commited in last 2 weeks. we can even display last two months , 2 days commit points also. )

8) $ git log --pretty=format:"%h -- %an"
this way there are lots of formats in which we can get the log details. 

9) $ git commit --ammend ( we can perform a kind of merge in are commit, we can chage the message of commit also. )

10) $ git log --graph ( using this we can get log details as well as the graph of our branching. )

-----------------------------------------------------------------------------------------------------------------------
checkout , revert and reset : 

then for example suppose we have 10 commit points and we want to go back and check how our project was on when we commited 3rd commit point then we can do that by checkout command

$ git checkout <commit point id>

here the commit point id can be particular commit point's id. we can also use 7 digit id which is displayed when we use --oneline to view commit points.

when we use this command we can just go back and see what was there. it will not change anything or undo anything. 
to go to master or main branch just type $ git checkout main

then suppose we have to undo any particular commit point at that time we can use 
$ git revert <commit id> 

when we use revert it will undo particular commit point and make a commit of that undo so when we want to redo at that time we can undo the revert commit which we perform for first undo the thing.

for ex. $ git revert 246a456 ( this will undo the commit and create a commit point id : 1234567 "revert 246a456")
	now when we want to redo the commit point we can do like : 
	$ git revert 1234546

$ git reset <commit id>

this is kind of a risky command we can say
when we use reset command it will undo the commit points but the code will be there.
when we reset any commit point that commit point's code will not be deleted but it will be unsaved.

when we want to delete that code at that time we can use
$ git reset <commit id> --hard

this will also delete the code as well

---------------------------------------------------------------------------------------------------------------------------------
here are some common code that is learn

$ git remote add <repo-link>
$ git rm -chached file 
$ git branch -a
$ git branch -d <branch-name>
$ git branch -D <branch-name>
$ git diff
$ git diff --staged
$ git status -s   or  $ git status --short
