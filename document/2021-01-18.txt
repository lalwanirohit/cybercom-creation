Arrow Functions ( => )

- arrow functions are very useful and introduced in ES6.
- using arrow functions we can write functions in short.
- if the simple function just return a single statement nothing else then we can remove the brackets and write that function is a form of one line.
- example 
	function countAge () {
	          return 2021 - 1999;
	}

- we can write it like , 

	() => 2021 - 1999;

- this is the benifit of arrow function.


arrow function lexical "this" keyword

- when we call a function inside from a function at that time we can not use this keyword to reference the object.
- for example we have an object and there is a funcction inside that object. after that we call another function inside from the function at that time if we use this keyword then it will point the global object which is document.
- to overcome this issue we can do some things but when we  use arrow function at that time this keyword of arrow function has lexical scoping. it meanse that when we use or call a function from another function then at that time this keyword will point to caller function's object.
- let's understand this thing by an example.

- example 

	var box5 = {
	    color: 'green',
	    position: 1,
	    clickMe: function() {
	        var self = this;
	        document.querySelector('.green').addEventListener('click', function() {
	            var str = 'this is box number ' + self.position + ' and it is ' + self.color;
	            alert(str);
	        });
	    }
	}
	box5.clickMe();

- here in above example we can see that we have used "self" variable in which we have stored "this".
- we can solve this also by arrow function

- example

	var box6 = {
	    color: 'green',
	    position: 1,
	    clickMe: function() {
	        document.querySelector('.green').addEventListener('click', () => {
	            var str = 'this is box number ' + this.position + ' and it is ' + this.color;
	            alert(str);
	        });
	    }
	}
	box6.clickMe();

- here we have used arrow function and we know that arrow function's lexical this keyword points the object of caller function so we dot't have to define self variable and store this into it and all that stuff.

- so this is the lexical this keyword of arrow function.
- we have to be very clear in mind about lexical this while using arrow function with this keyword.
 	   
-----------------------------------------------------------------------------------------------------------------------------------------

destructuring

- destructuring gives us a very convinient way to extract data from object of array kind of structures.

- for example we have an array which contains 3 values and now we have to destructure it and we have to make seperate variables to store the values of array elements then we have to destructure that array.

- we can do this by destructuring.

- example 
	var mike  = ['mike', 26 , 'designer'];

- now destructure it

	cosnt [name, age, job] = mike;
	console.log(name);
	console.log(age);
	console.log(job);

- here all three variables name, age and job will be assigned values from array linearly.
- this way we can destruture any array into variables.  
- we  can also do this with an object too.

- example 
	const mike = {
	     firstName: 'mike' ,
	     lastName: 'marcus'
	};

- now let's destruct it

	const { firstName , lastName } = mike
	console.log(firstName);
	console.log(lastName);

- here we can see that we have used { } curley braces and the reason is we are destructuring the object and in object we use {} curley braces.
- if we want to change the keys from firstName and lastName to something else then wwe can do like ,

	const {firstName: a , lastName: b} = mike;
	console.log(a , b);

- this way we can destruct the object.
- when we want to simply return more than one value at that time we can use destructuring.

- example 
	function calcAgeRetirement(year) {
	    const age = new Date().getFullYear() - year;
	    return [age , 65-age];  // returning more than one value
	}

	const [age2 , retirementAge] = calcAgeRetirement(1999);
	console.log(age2);
	console.log(retirementAge);

- this way we can destructure the function when it returns more than one vlaue.

-----------------------------------------------------------------------------------------------------------------------------------------

Arrays in ES6

- we can use forEach loop to iterate in array.
- but when we want to use continue and break statement in forEach loop then it is not possible.

- findIndex() : return the index based on the condition. if two are correct or two indexes are found then it will return first found index.
 
- find() : return the value based on some condition . if two are correct or two values are found then it will return first found value.

- querySelectorAll() : is used to select all the elements.