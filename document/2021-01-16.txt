return function from a function

- we can use a function as return statement also. 
- we just have to simply pass the function with return
- the function that we return is a kind of anonymous function because it does not have any kind of name.
- it just perform it's functionality.

- example

	// a generic function
	function interviewQuestion (job) {
	    if(job === "teacher") {
	        //return a function
	        return function (name) {
	            console.log (name + " , can you explain what is the formula of counting BMI ?");
	        }
	    }
	    else if (job === "designer") {
	        return function (name) {
	            console.log(name + " , can you please explain what is figma tool ?");
	        }
	    }
	    else {
	        return function (name) {
	            console.log("what do you do " + name + " ?");
	        }	
	    }
	}

	// stored function in a variable
	var teacherQuestion = interviewQuestion('teacher');
	teacherQuestion('Sumant'); // call the function through variable and passed the return function's parameter.

	var designerQuestion = interviewQuestion('designer');
	designerQuestion('Naimish');

	var generalQuestion = interviewQuestion('cricketer');
	generalQuestion('warner');

	// we also can do this 
	interviewQuestion('teacher')('Ankit');

- this way we can perform simple program to return a function from  a function

------------------------------------------------------------------------------------------------------------------------------

IIFE (Immediately Invoked Function Expression)

- when we need to create a variable or some functionality that want to keep private or hidden from others at that time we can use this.
- in IIFE we will simply create a function without any name means an anonymous function and then call it.

- example 

	// IIFE 
	(function () {
	    score = Math.random() * 10;
	    if(score >= 5) {
	        console.log("you won");
	    }
	    else {
	        console.log("you loss");
	    }
	}) ();

-------------------------------------------------------------------------------------------------------------------------------
call() , apply() and bind() methods

call()

- Call ( ) method is used to call the methods of another function.
- When we use call method the first argument we have to give is object
- We can perform method borrowing using call method
- After first object , from second argument all will be the argument of method which will be passed

-example 

	//simple object
	var sanket = {
    	name: 'sanket',
	    age: 17,
	    job: 'student',
	    presentation : function(style , timeOfDay) {
	        if(style='formal') {
	            console.log('good ' + timeOfDay + ', ladies and gentlemen. i\'m ' +this.name + '. i\'m a ' + this.job + '. i\'m '+ this.age + ' years old.');
	        }
	        else if(style='friendly') {
	            console.log('hey what\'s  up ? good ' + timeOfDay + '. i\'m ' +this.name + '. i\'m a ' + this.job + '. i\'m '+ this.age + ' years old.');
	        }
	    }
	};

	sanket.presentation('formal','morning');

	//another object
	var rohit = {
	    name: 'rohit',
	    age: 22,
	    job: 'software engineer'
	};

	//used call method to 
	sanket.presentation.call(rohit,'friendly','evening');		

apply()

- Apply ( ) is same as call ( ) but there is small difference.
- Apply will take array of arguments as second argument so we have to pass the array of arguments as the second argument to apply method.

- example 

	sanket.presentation.apply(rohit , ['friendly','afternoon']);	

bind()

- Bind ( ) is allow us to use or create preset arguments in a function.
- We can preset an argument of function using the bind ( ) method.

- Example 

	//used bind method
	sanket.presentFriendly = sanket.presentation.bind(sanket,'friendly');
	sanket.presentFriendly('evening');

--------------------------------------------------------------------------------------------------------------------------------

closures 

- when we return any anonymous function from a function at that time we know that when function return something at that time it's work is completed and it's execution context is removed from stack but after thwn also the function which is return by the general function can use all the property of caller function.
- this is closure. we can use the property of caller function even if it is removed from execution stack.

- example 

	//closure
	function retirement (retirementAge) {
	    var a = ' years left until retirement.';
	    return function (yearOfBirth) {
	        var age = 2021 - yearOfBirth;
	        console.log((retirementAge - age) + a);
	    }
	}

	// call function 
	retirement(60)(1999);

	// also can be called like ,
	var retirementIndia = retirement(60);
	retirementIndia(1999); 

---------------------------------------------------------------------------------------------------------------------------------

ES6 / ES2015

- ES6 came in 2015
- there are lot's of new features in ES6 in compare of ES5
- here are they , 
	
	1) variable declaration with let and const
	2) blocks ans IIFE 
	3) Strings
	4) arrow functions
	5) destructuring
	6) arrays
	7) spread operator
	8) maps
	9) classes and subclasses and many more

variable declaration using let and const

let 

- we can create or declare variables using let.
- syntax : let <variable_name> = <value>;
- when we declare variable using let at that time the variable has block scope.
- it means that we can not use variable outside of that scope
- we can mutate that variable.

- example : 
	let a = 25;
	console.log(a);
	a = 45;
	console.log(a);

	{
    	     let number = 101;
	}
	console.log(number); // this will generate error because we can not use variable decalred using let outside block 

- generally we can define a block using { } in ES6.
- we also can not use variable first and then defined them like ES5.
- if we first print number and then define them then it will generate error in ES6 but it will be fine in ES5.

- example
	console.log(firstName);
	var firstName="justin";

	console.log(lastName);  // error because we can not do this using let or in ES6.
	let lastName="biber";    

- example
	let i = 45;
	for ( let i=1 ; i<=5 ; i++) {
	    console.log(i);
	}
	console.log(i);	

- here both i variables are different because when we define variables using let then they will be block scope variables.


const 

- when we want to declare variables whose value will no change in future then we can declare it using const.
- in short we can decalre constant variables using const.
- we can not change or mutate the value of constant variable
- syntax : const <variable_name> = <value>;

-example : 
	const b = 45;
	console.log(b);
	//b = 25;
	//console.log(b);

IIFE

- it is lot more easy to use IIFE in ES6
- we know that IIFE is used to provide the security or privacy to our code
- example 
	
	{
    	     let val2 = 15;
	}
	//console.log(val2);

-----------------------------------------------------------------------------------------------------------------------

strings

- in ES6 we have a verty useful thing called "template literals". 
- we can concat strings using template literals.
- it is very handy feature and lot lot more easier than the + operator in ES5 to concate.
- example 

	let country = 'India';
	let state = 'Gujarat';
	let city = 'junagadh';

	console.log(`i am rohit. i am from ${city} city. ${city} is in ${state} state. ${state} is in ${country}.`);

- this way we can easily write and concate strings in ES6
- there are also some methods of strings in ES6 which are as follows.

1) startsWith() : check at start of string 
2) endsWith() : check at the end of string
3) includes() : check availibility in string or not
4) repeat() : repeat the string

- example 

	// string methods
	const n = "Rohit Lalwani";

	console.log(n.startsWith('R')); // checks the string start with given value or not ?
	console.log(n.endsWith('ni')); // checks string ends with given value or not ? 
	console.log(n.includes('hi')); // checks string include or string has given value or not ?
	console.log(`${n} `.repeat(5)); // repeat the string to given number of times

----------------------------------------------------------------------------------------------------------------------- 